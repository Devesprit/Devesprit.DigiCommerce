
@using Devesprit.Core
@using Syncfusion.JavaScript
@using Syncfusion.MVC.EJ
@{
    Layout = null;
    var currentLang = DependencyResolver.Current.GetService<IWorkContext>().CurrentLanguage;
}

@(Html.EJ().Grid<object>("UserGroupsGrid")
        .Datasource(ds =>
        {
            ds.URL(ViewBag.DataSource).Adaptor(AdaptorType.UrlAdaptor);
        })
        .AllowSorting()
        .AllowResizing()
        .AllowReordering()
        .AllowPaging()
        .AllowFiltering()
        .AllowTextWrap()
        .AllowSelection()
        .ShowColumnChooser()
        .IsResponsive()
        .SelectionType(SelectionType.Multiple)
        .EnablePersistence(false)
        .EnableResponsiveRow(true)
        .EnableRTL(currentLang.IsRtl)
        .MinWidth(990)
        .Locale("localString")
        .ClientSideEvents(evt => evt.ActionBegin("onUserGroupsGridAction"))

        .EditSettings(edt => edt.AllowEditing().AllowDeleting().AllowAdding().ShowDeleteConfirmDialog())
        .PageSettings(p => { p.PageSize(25).PageSizeList(new List<int>() { 10, 25, 50, 100, 250, 500 }).PageCount(5).PrintMode(PrintMode.CurrentPage); })
        .FilterSettings(f => { f.FilterType(FilterType.Menu); })
        .TextWrapSettings(s => s.WrapMode(WrapMode.Both))
        .ScrollSettings(s => s.EnableTouchScroll(true))
        .ToolbarSettings(toolBar => toolBar.ShowToolbar()
            .CustomToolbarItems(new List<object>() { new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#UserGroupsGridRefresh" } })
            .ToolbarItems(items =>
        {
            items.AddTool(ToolBarItems.Add);
            items.AddTool(ToolBarItems.Edit);
            items.AddTool(ToolBarItems.Delete);
            items.AddTool(ToolBarItems.PrintGrid);
        }))
        .Columns(col =>
        {
            col.Field("Id").HeaderText(T("Id").ToString()).Width(60).IsPrimaryKey(true).Visible(false).Add();
            col.Field("GroupName").HeaderText(T("Name").ToString()).Add();
            col.Field("SubscriptionFee").HeaderText(T("Fee").ToString()).Add();
            col.Field("SubscriptionDiscountPercentage").Format("%{0:n2}").HeaderText(T("DiscountPercent").ToString()).Add();
            col.Field("DiscountForRenewalBeforeExpiration").Format("%{0:n2}").HeaderText(T("DiscountForRenewalBeforeExpiration").ToString()).Visible(false).Add();
            col.Field("GroupPriority").HeaderText(T("Priority").ToString()).Add();
            col.Field("Published").HeaderText(T("Published").ToString()).Width(120).Add();
            col.Field("SubscriptionExpirationTime").HeaderText(T("ExpirationTime").ToString()).Visible(false).Add();
            col.Field("DownloadLimit").HeaderText(T("DownloadLimit").ToString()).Visible(false).Add();
            col.Field("GroupDisplayOrder").HeaderText(T("DisplayOrder").ToString()).Visible(false).Add();
        }))
<script id="UserGroupsGridRefresh" type="text/x-jsrender">
    <a onclick="refreshUserGroupsGrid();" class="e-toolbaricons e-icon"><i class="fa fa-refresh"></i></a>
</script>

@Html.MinifyInlineScript(
    @<script>
    function onUserGroupsGridAction(args) {
        if (args.requestType === "delete") {
            //Delete record
            args.cancel = true;
            DeleteEntity(args.data.map(function(item){return item.Id;}), "@Url.Action("Delete")", refreshUserGroupsGrid);
        } else if (args.requestType === "beginedit") {
            //Edit record
            args.cancel = true;
            PopupWindows('@Url.Action("Editor")', 'UserGroupEditor', 1200, 700, { id: args.rowData.Id }, 'get');
        } else if (args.requestType === "add") {
            //Add new record
            args.cancel = true;
            PopupWindows('@Url.Action("Editor")', 'UserGroupEditor', 1200, 700, {}, 'get');
        }
    }

    function refreshUserGroupsGrid() {
        $("#UserGroupsGrid").ejGrid("refreshContent");
    }
    </script>)