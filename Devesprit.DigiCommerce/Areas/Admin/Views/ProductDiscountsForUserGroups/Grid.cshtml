
@using Devesprit.Core
@using Syncfusion.JavaScript
@using Syncfusion.MVC.EJ

@{
    var currentLang = DependencyResolver.Current.GetService<IWorkContext>().CurrentLanguage;
}

@(Html.EJ().Grid<object>("ProductDiscountsForUserGroupsGrid")
              .Datasource(ds =>
              {
                  ds.URL(ViewBag.DataSource).Adaptor(AdaptorType.UrlAdaptor);
              })
              .AllowSorting()
              .AllowResizing()
              .AllowReordering()
              .AllowPaging()
              .AllowFiltering()
              .AllowTextWrap()
              .AllowSelection()
              .ShowColumnChooser()
              .IsResponsive()
              .SelectionType(SelectionType.Multiple)
              .EnablePersistence(false)
              .EnableResponsiveRow(true)
              .EnableRTL(currentLang.IsRtl)
              .MinWidth(990)
              .Locale("localString")
              .ClientSideEvents(evt => evt.ActionBegin("onProductDiscountsForUserGroupsGridAction"))

              .EditSettings(edt => edt.AllowEditing().AllowDeleting().AllowAdding().ShowDeleteConfirmDialog())
              .PageSettings(p => { p.PageSize(25).PageSizeList(new List<int>(){10, 25, 50, 100, 250, 500}).PageCount(5).PrintMode(PrintMode.CurrentPage); })
              .FilterSettings(f => { f.FilterType(FilterType.Menu); })
              .TextWrapSettings(s => s.WrapMode(WrapMode.Both))
              .ScrollSettings(s=> s.EnableTouchScroll(true))
              .ToolbarSettings(toolBar => toolBar.ShowToolbar()
                  .CustomToolbarItems(new List<object>(){ new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#ProductDiscountsForUserGroupsGridRefresh" } })
                  .ToolbarItems(items =>
              {
                  items.AddTool(ToolBarItems.Add);
                  items.AddTool(ToolBarItems.Edit);
                  items.AddTool(ToolBarItems.Delete);
                  items.AddTool(ToolBarItems.PrintGrid);
              }))
              .Columns(col =>
              {
                  col.Field("Id").Width(50).HeaderText(T("Id").ToString()).IsPrimaryKey(true).Visible(false).Add();
                  col.Field("UserGroup").HeaderText(T("UserGroup").ToString()).Width(160).Add();
                  col.Field("DiscountPercent").Format("{0:n2}").HeaderText(T("DiscountPercent").ToString()).Width(60).Add();
                  col.Field("ApplyDiscountToProductAttributes").HeaderText(T("ApplyDiscountToProductAttributes").ToString()).Width(160).Add();
              }))
<script id="ProductDiscountsForUserGroupsGridRefresh" type="text/x-jsrender">
    <a onclick="refreshProductDiscountsForUserGroupsGrid();" class="e-toolbaricons e-icon"><i class="fa fa-refresh"></i></a>
</script>

@Html.MinifyInlineScript(
    @<script>
    function onProductDiscountsForUserGroupsGridAction(args) {
        if (args.requestType === "delete") {
            //Delete record
            args.cancel = true;
            DeleteEntity(args.data.map(function(item){return item.Id;}), "@Url.Action("Delete")", refreshProductDiscountsForUserGroupsGrid);
        } else if (args.requestType === "beginedit") {
            //Edit record
            args.cancel = true;
            PopupWindows('@Url.Action("Editor")', 'ProductDiscountsForUserGroupsEditor', 600, 400, { id: args.rowData.Id, productId: @ViewBag.ProductId }, 'get');
        } else if (args.requestType === "add") {
            //Add new record
            args.cancel = true;
            PopupWindows('@Url.Action("Editor")', 'ProductDiscountsForUserGroupsEditor', 600, 400, {productId: @ViewBag.ProductId}, 'get');
        }
    }

    function refreshProductDiscountsForUserGroupsGrid() {
        $("#ProductDiscountsForUserGroupsGrid").ejGrid("refreshContent");
    }
    </script>)   