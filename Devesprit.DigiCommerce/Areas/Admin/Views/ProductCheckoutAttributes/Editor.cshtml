@using Devesprit.Data.Enums
@using Devesprit.WebFramework.Helpers
@model Devesprit.DigiCommerce.Areas.Admin.Models.ProductCheckoutAttributeModel
@{
    Layout = Html.GetCurrentThemeAdminAreaLayoutAddress(true);
    @* https://CKEditor.com *@
    Html.AddScriptParts(ResourceLocation.Footer, "~/Scripts/CKEditor/ckeditor.js", true);
}

<div class="container-fluid mar-v-35">
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item">
            <a class="nav-link nav-link-sm active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true">@T("Attribute")</a>
        </li>
        <li class="nav-item">
            <a class="nav-link nav-link-sm" id="options-tab" data-toggle="tab" href="#options" role="tab" aria-controls="options" aria-selected="false">@T("Options")</a>
        </li>
    </ul>

    <div class="panel no-hide-overflow pad-20 fs-14">
        <div class="tab-content">
            <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
                @using (Html.BeginForm("Editor", "ProductCheckoutAttributes", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(p => p.Id)
                    @Html.HiddenFor(p => p.ProductId)

                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                @Html.LabelFor(p => p.Name)
                                @Html.LocalizedTextBoxFor(p => p.Name, null, new { @class = "form-control form-control-sm" })
                                @Html.ValidationMessageFor(p => p.Name, "", new { @class = "form-text text-danger fs-12" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                @Html.LabelFor(p => p.Description)
                                @Html.LocalizedTextAreaFor(p => p.Description, new { @class = "ckeditor" })
                                @Html.ValidationMessageFor(p => p.Description, "", new { @class = "form-text text-danger fs-12" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(p => p.AttributeType)
                                @Html.EnumDropDownListFor(p => p.AttributeType, new { @class = "form-control custom-select form-control-sm", onchange = "attributeTypeChange()" })
                                @Html.ValidationMessageFor(p => p.AttributeType, "", new { @class = "form-text text-danger fs-12" })
                            </div>
                        </div>
                        <div class="col-12 col-md-6 ">
                            <div class="form-group">
                                @Html.LabelFor(p => p.LicenseGeneratorServiceId)
                                @Html.DropDownListFor(p => p.LicenseGeneratorServiceId, Model.LicenseGeneratorsList, T("SelectAnItem").ToString(), new { @class = "form-control custom-select form-control-sm" })
                                @Html.ValidationMessageFor(p => p.LicenseGeneratorServiceId, "", new { @class = "form-text text-danger fs-12" })
                            </div>
                        </div>
                    </div>
                    <div class="row d-none" id="attribute-unit-price">
                        <div class="col-12">
                            <div class="form-group">
                                @Html.LabelFor(p => p.UnitPrice)
                                @Html.TextBoxFor(p => p.UnitPrice, new { @class = "form-control form-control-sm ltr-dir", type = "number" })
                                @Html.ValidationMessageFor(p => p.UnitPrice, "", new { @class = "form-text text-danger fs-12" })
                            </div>
                        </div>
                    </div>
                    <div class="row d-none" id="attribute-limitation-Data">
                        <div class="col-12 col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(p => p.MinRange)
                                @Html.TextBoxFor(p => p.MinRange, new { @class = "form-control form-control-sm ltr-dir", type = "number" })
                                @Html.ValidationMessageFor(p => p.MinRange, "", new { @class = "form-text text-danger fs-12" })
                            </div>
                        </div>
                        <div class="col-12 col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(p => p.MaxRange)
                                @Html.TextBoxFor(p => p.MaxRange, new { @class = "form-control form-control-sm ltr-dir", type = "number" })
                                @Html.ValidationMessageFor(p => p.MaxRange, "", new { @class = "form-text text-danger fs-12" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                @Html.LabelFor(p => p.DisplayOrder)
                                @Html.TextBoxFor(p => p.DisplayOrder, new { @class = "form-control form-control-sm", type = "number" })
                                @Html.ValidationMessageFor(p => p.DisplayOrder, "", new { @class = "form-text text-danger fs-12" })
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12 col-md-3 ">
                            <div class="form-group">
                                <div class="custom-control custom-checkbox">
                                    @Html.CheckBoxFor(p => p.Required, new { @class = "custom-control-input" })
                                    @Html.LabelFor(p => p.Required, new { @class = "custom-control-label" })
                                </div>
                                @Html.ValidationMessageFor(p => p.Required, "", new { @class = "form-text text-danger fs-12" })
                            </div>
                        </div>
                    </div>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" }).ToMvcHtmlString()

                    <div class="text-center t-mar-20">
                        <button type="submit" class="btn btn-sm btn-warning">@T("Save")</button>
                        <button type="button" onclick="SaveAndContinue($(this).closest('form'));" class="btn btn-sm btn-warning">@T("SaveAndContinue")</button>
                        <button type="button" onclick="window.close();" class="btn btn-sm btn-success">@T("Close")</button>
                    </div>
                }
            </div>

            <div class="tab-pane fade" id="options" role="tabpanel" aria-labelledby="options-tab">
                @if (Model.Id == null)
                {
                    <h4 class="text-muted text-center mar-v-50">
                        @T("SaveRecordToSeeThisSection")
                    </h4>
                }
                else
                {
                    Html.RenderAction("Grid", "ProductCheckoutAttributeOptions", new { attributeId = Model.Id.Value });
                }
            </div>
        </div>
    </div>
</div>

@{
    Html.AddInlineScript(ResourceLocation.Footer,
@<script>
             function attributeTypeChange() {
                 var selectedValue = $("#AttributeType").val();
                 if (selectedValue === '@((int)ProductCheckoutAttributeType.DropDownList)' ||
                     selectedValue === '@((int)ProductCheckoutAttributeType.CheckBoxList)' ||
                     selectedValue === '@((int)ProductCheckoutAttributeType.RadioButtonList)') {
                     $("#attribute-unit-price").addClass("d-none");
                     $("#attribute-limitation-Data").addClass("d-none");
                 } else if (selectedValue === '@((int)ProductCheckoutAttributeType.TextArea)' ||
                     selectedValue === '@((int)ProductCheckoutAttributeType.TextBox)') {
                     $("#attribute-unit-price").addClass("d-none");
                     $("#attribute-limitation-Data").removeClass("d-none");
                 } else if (selectedValue === '@((int)ProductCheckoutAttributeType.NumberBox)'){
                     $("#attribute-unit-price").removeClass("d-none");
                     $("#attribute-limitation-Data").removeClass("d-none");
                 }
            }

             attributeTypeChange();
</script>, true);
}