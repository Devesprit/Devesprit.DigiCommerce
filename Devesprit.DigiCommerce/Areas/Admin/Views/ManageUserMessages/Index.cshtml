
@using Devesprit.Core
@using Syncfusion.JavaScript
@using Syncfusion.MVC.EJ
@{
    ViewBag.Title = T("ManageUserMessages");
    var currentLang = DependencyResolver.Current.GetService<IWorkContext>().CurrentLanguage;
}

<div class="panel no-hide-overflow">
    <div class="panel-title pad-10">
        <h5 class="no-mar">
            @T("ManageUserMessages")
        </h5>
    </div>

    <div class="pad-10">
        @(Html.EJ().Grid<object>("UserMessagesGrid")
              .Datasource(ds =>
              {
                  ds.URL(Url.Action("GridDataSource")).Adaptor(AdaptorType.UrlAdaptor);
              })
              .AllowSorting()
              .AllowResizing()
              .AllowReordering()
              .AllowPaging()
              .AllowFiltering()
              .AllowTextWrap()
              .AllowSelection()
              .ShowColumnChooser()
              .IsResponsive()
              .SelectionType(SelectionType.Multiple)
              .EnablePersistence(false)
              .EnableResponsiveRow(true)
              .EnableRTL(currentLang.IsRtl)
              .MinWidth(990)
              .Locale("localString")
              .ClientSideEvents(evt => evt.ActionBegin("onUserMessagesGridAction"))

              .EditSettings(edt => edt.AllowEditing().AllowDeleting().ShowDeleteConfirmDialog())
              .PageSettings(p => { p.PageSize(25).PageSizeList(new List<int>(){10, 25, 50, 100, 250, 500}).PageCount(5).PrintMode(PrintMode.CurrentPage); })
              .FilterSettings(f => { f.FilterType(FilterType.Menu); })
              .TextWrapSettings(s => s.WrapMode(WrapMode.Both))
              .ScrollSettings(s=> s.EnableTouchScroll(true))
              .ToolbarSettings(toolBar => toolBar.ShowToolbar()
                  .CustomToolbarItems(new List<object>() { new Syncfusion.JavaScript.Models.CustomToolbarItem() { TemplateID = "#UserMessagesGridRefresh" } })
                  .ToolbarItems(items =>
                  {
                      items.AddTool(ToolBarItems.Edit);
                      items.AddTool(ToolBarItems.Delete);
                      items.AddTool(ToolBarItems.PrintGrid);
                  }))
              .Columns(col =>
              {
                  col.Field("Id").HeaderText(T("Id").ToString()).Width(100).IsPrimaryKey(true).Visible(false).Add();
                  col.Field("Name").HeaderText(T("Name").ToString()).Add();
                  col.Field("Email").HeaderText(T("Email").ToString()).Add();
                  col.Field("Subject").HeaderText(T("Subject").ToString()).Add();
                  col.Field("ReceiveDate").HeaderText(T("ReceiveDate").ToString()).Format("{0:yyyy/MM/dd HH:mm:ss}").Add();
                  col.Field("Readed").HeaderText(T("Readed").ToString()).Visible(false).Add();
                  col.Field("Replied").HeaderText(T("Replied").ToString()).Add();
                  col.Field("ReplyDate").HeaderText(T("ReplyDate").ToString()).Format("{0:yyyy/MM/dd HH:mm:ss}").Visible(false).Add();
                  col.HeaderText(T("Action").ToString()).TextAlign(TextAlign.Center).Width(150).AllowEditing(false).Template("#ActionTemplate").Add();
              }))
    </div>
</div>

<script id="ActionTemplate" type="text/template">
    <div class="my-1">
        <button class="btn btn-xs btn-primary text-light mt-1" onclick="PopupWindows('@Url.Action("ReplyToUserMessage")', 'ReplyToUserMessage', 1200, 600, { id: {{:Id}} }, 'get');"><i class="fa fa-reply"></i> @T("Reply")</button>

        {{if Readed }}
        <button type="button" class="btn btn-xs btn-warning text-light mt-1" onclick="setMessageStatus({{:Id}}, false)">@T("MarkAsUnRead")</button>
        {{else}}
        <button type="button" class="btn btn-xs btn-success text-light mt-1" onclick="setMessageStatus({{:Id}}, true)">@T("MarkAsRead")</button>
        {{/if}}
    </div>
</script>

<script id="UserMessagesGridRefresh" type="text/x-jsrender">
    <a onclick="refreshUserMessagesGrid();" class="e-toolbaricons e-icon"><i class="fa fa-refresh"></i></a>
</script>
@{
    Html.AddInlineScript(ResourceLocation.Footer,
@<script>
    function onUserMessagesGridAction(args) {
            if (args.requestType === "delete") {
                //Delete record
                args.cancel = true;
                DeleteEntity(args.data.map(function(item){return item.Id;}), "@Url.Action("Delete")", refreshUserMessagesGrid);
            } else if (args.requestType === "beginedit") {
                args.cancel = true;
                PopupWindows('@Url.Action("ReplyToUserMessage")', 'ReplyToUserMessage', 1200, 600, { id: args.rowData.Id }, 'get');
            }
    }

    function setMessageStatus(messageId, status) {
        $('#LoadingPanel').show();
        $.ajax({
            type: "POST",
            url: "@Url.Action("SetMessageStatus")",
            data: {
                id: messageId,
                readed: status
            },
            error: function(xhr, status, error) {
                ErrorAlert('@T("Error")', '@T("ServerConnectionError")');
            },
            success: function(response) {
                if (response === 'OK') {
                    refreshUserMessagesGrid();
                } else {
                    ErrorAlert('@T("Error")', response);
                }
            },
            complete: function() {
                $('#LoadingPanel').hide();
            }
        });
    }

    function refreshUserMessagesGrid() {
        $("#UserMessagesGrid").ejGrid("refreshContent");
        }
</script>);
}