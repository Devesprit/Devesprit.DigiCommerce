
@using Devesprit.Core
@using Devesprit.Services.Products
@using Devesprit.WebFramework.Helpers
@using OtherExtensions = Devesprit.Utilities.Extensions.OtherExtensions

@model Devesprit.DigiCommerce.Models.Download.DownloadModel
@{
    ViewBag.Title = $"{T("Download")} - {Model.PageTitle}";
    ViewBag.MetaDescription = ViewBag.Title;
    int counter = 0;
    var currentLang = DependencyResolver.Current.GetService<IWorkContext>().CurrentLanguage;
    Html.AddHeadCustomParts("<meta name=\"robots\" content=\"noindex,nofollow\">");
}

<div class="panel">
    <div class="panel-title pad-15">
        @if (!string.IsNullOrWhiteSpace(Model.ProductPageUrl))
        {
            <h4 class="fw-bold no-mar">
                <a class="card-link text-light" href="@Model.ProductPageUrl">
                    <i class="fa fa-arrow-circle-o-@Html.Raw(currentLang.IsRtl ? "right" : "left") text-warning"></i>
                    @T("Download") - @Html.Raw(Model.PageTitle)
                    @Html.Raw(Model.IsDemo ? $"<small>({T("DemoVersion")})</small>" : "")
                </a>
            </h4>
        }
        else
        {
            <h4 class="fw-bold no-mar">
                @T("Download") - @Html.Raw(Model.PageTitle)
                @Html.Raw(Model.IsDemo ? $"<small>({T("DemoVersion")})</small>" : "")
            </h4>
        }
    </div>

    
        @if (Model.UserHasAccessToFiles != null && !OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserCanDownloadProduct))
        {
            <img src="~/Content/img/Error_250px.png" class="d-block m-auto" style="max-width: 150px" />
            <h6 class="alert alert-danger text-center mar-h-40">
                @Html.Raw(T("YouDoNotHaveAccessToThisProduct"))
            </h6>
            <div class="mar-h-40 b-mar-40 pad-20 border rounded border-danger">
                @Html.Raw(T("ToDownloadThisProductFollowTheseSteps"))
                <ul>
                    @if (OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserMustLoggedIn))
                    {
                        <li>
                            @Html.Raw(T("ToDownloadThisProductUserMustLoggedIn",
                                Url.Action("Login", "User", new { returnUrl = HttpContext.Current.Request.RawUrl, area = "" }),
                                Url.Action("SignUp", "User", new { area = "" })))
                        </li>
                    }

                    @if (OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserMustSubscribeToAPlan))
                    {
                        <li>
                            @Html.Raw(T("ToDownloadThisProductUserMustSubscribeToAPlan",
                                Model.UserGroupName,
                                Url.Action("UpgradeAccount", "Purchase")))
                        </li>
                    }

                    @if (OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserMustSubscribeToAPlanOrHigher))
                    {
                        <li>
                            @Html.Raw(T("ToDownloadThisProductUserMustSubscribeToAPlanOrHigher",
                                Model.UserGroupName,
                                Url.Action("UpgradeAccount", "Purchase")))
                        </li>
                    }

                    @if (OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserMustPurchaseTheProduct))
                    {
                        <li>
                            @Html.Raw(T("ToDownloadThisProductUserMustBuyTheProduct", Model.ProductPageUrl))
                        </li>
                    }

                    @if (OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserDownloadLimitReached))
                    {
                        <li>
                            @Html.Raw(T("YourDownloadLimitationHasBeenReached",
                                Model.DownloadLimit.ToString("N0"),
                                Model.DownloadLimitPer,
                                Model.DownloadLimitResetDate.ToString("f"),
                                Url.Action("Index", "Profile", new { area = "" })))
                        </li>
                    }

                    @if (OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserGroupDownloadLimitReached))
                    {
                        <li>
                            @Html.Raw(T("YourUserGroupDownloadLimitationHasBeenReached",
                                Model.DownloadLimit.ToString("N0"),
                                Model.DownloadLimitPer,
                                Model.DownloadLimitResetDate.ToString("f"),
                                Url.Action("Index", "Profile", new { area = "" })))
                        </li>
                    }
                </ul>

                @if ((OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserMustSubscribeToAPlan) ||
                     OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserMustSubscribeToAPlanOrHigher) ||
                     OtherExtensions.HasFlagFast(Model.UserHasAccessToFiles.Value, UserCanDownloadProductResult.UserMustPurchaseTheProduct))
                    && !string.IsNullOrWhiteSpace(Model.DiscountsForUserGroups))
                {
                    <h6 class="alert alert-warning text-center t-mar-40">
                        @T("SpecialDiscountsForVIPUsers"):
                        <br />
                        <br />
                        <small>@Html.Raw(Model.DiscountsForUserGroups)</small>
                    </h6> 
                }
            </div>
        }
        @if (@Model.FileGroups.All(p => string.IsNullOrWhiteSpace(p.FileListTree)))
        {
            <h3 class="text-center text-muted mar-50">@T("NoFilesToDownload")</h3>
        }
        else
        {
            <div class="accordion" id="accordion">

                @foreach (var group in Model.FileGroups.Where(p => !string.IsNullOrWhiteSpace(p.FileListTree)))
                {
                    <div class="card  shadow-none">
                        <div class="card-header" id="heading-@counter">
                            <h5 class="mb-0">
                                <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapse-@counter" aria-expanded="true" aria-controls="collapse-@counter">
                                    @group.Title
                                </button>
                            </h5>
                        </div>

                        <div id="collapse-@counter" class="collapse @Html.Raw(counter == 0 ? "show" : "")" aria-labelledby="heading-@counter" data-parent="#accordion">
                            <div class="card-body" style="overflow-x: scroll">
                                <input type="text" id="txtSearchBox-@counter" class="form-control form-control-sm b-mar-15" placeholder="@T("Search")" />
                                <div id="filesListTree-@counter">
                                    @Html.Raw(group.FileListTree)
                                </div>
                            </div>
                        </div>
                    </div>

                    Html.AddInlineScript(ResourceLocation.Footer,
                        @<script>
                             $('#filesListTree-@counter').jstree({
                                 "plugins": ["wholerow", "search"],
                                 "core": {
                                     "themes": {
                                         "variant": "large"
                                     }
                                 }
                             }).bind("select_node.jstree",
                                 function(e, data) {
                                     var href = data.node.a_attr.href;
                                     if (href !== "#") {
                                         var win = window.open(href, '_blank');
                                         win.focus();
                                     }
                                 });

                             var to = false;
                             $('#txtSearchBox-@counter').keyup(function() {
                                 if (to) {
                                     clearTimeout(to);
                                 }
                                 to = setTimeout(function() {
                                         var v = $('#txtSearchBox-@counter').val();
                                         $('#filesListTree-@counter').jstree(true).search(v);
                                     },
                                     250);
                             });
                         </script>);

                    counter++;
                }

            </div>
        }

</div>