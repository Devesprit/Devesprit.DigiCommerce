@using System.Globalization
@using Devesprit.Core.Settings
@using Devesprit.Services
@using Devesprit.Services.Currency
@using Devesprit.Utilities
@using Devesprit.Utilities.Extensions
@using Schema.NET

@model Devesprit.DigiCommerce.Models.Download.DownloadModel
@{
    ViewBag.Title = T("DownloadPageTitle", Model.ProductModel.PageTitle);
    ViewBag.MetaDescription = T("DownloadPageMetaDesc", Model.PageTitle);
}

<!-- Head slider -->
<header class="pro-head-slider">
    <div class="pro-head-slider-layer">
        <div class="container">
            <div class="row">
                <div class="col-12 d-flex justify-content-center">
                    <h1 class="pro-head-title pro-head-title-single no-t-mar">
                        @T("DownloadPageHeader", Html.Raw(Model.PageTitle))
                    </h1>
                </div>
                <div class="col-12">
                    <ul class="breadcrumbs">
                        <li><a href="@Url.Action("Index", "Home")">@T("Home")</a></li>
                        <li>/</li>
                        <li><a href="@Model.ProductPageUrl">@Html.Raw(Model.PageTitle)</a></li>
                        <li>/</li>
                        <li>@T("Download") @Html.Raw(Model.IsDemo ? $"<small>({T("DemoVersion")})</small>" : "")</li>
                    </ul>
                </div>
                <div class="col-12 d-flex justify-content-center">
                    @{Html.RenderPartial("Partials/_SearchBox");}
                </div>
            </div>
        </div>
    </div>
</header>

<div class="container t-mar-60 b-mar-60">

    @{ Html.RenderAction("DownloadProductChildView", "Download", new { productId = Model.ProductModel.Id, demoFiles = Model.IsDemo }); }

</div>



<script type="application/ld+json">
    @Html.Raw(GenerateSchema())
</script>

@functions
{
    private string GenerateSchema()
    {
        var setting = DependencyResolver.Current.GetService<ISettingService>().LoadSetting<SiteSettings>();
        var defaultCurrency = DependencyResolver.Current.GetService<ICurrencyService>().GetDefaultCurrency();
        var images = new List<Uri>();
        foreach (var image in Model.ProductModel.Images)
        {
            images.Add(new Uri(image.ImageUrl.GetAbsoluteUrl()));
        }

        var result = new Schema.NET.SoftwareApplication()
        {
            Name = Model.ProductModel.Title.ConvertHtmlToText(),
            Headline = Model.ProductModel.Title.ConvertHtmlToText(),
            Description = Model.ProductModel.Descriptions.FirstOrDefault()?.Description.ConvertHtmlToText() ?? Model.ProductModel.MetaDescription,
            DatePublished = Model.ProductModel.PublishDate,
            DateCreated = Model.ProductModel.PublishDate,
            DateModified = Model.ProductModel.LastUpdate,
            InteractionStatistic = new InteractionCounter()
            {
                UserInteractionCount = Model.ProductModel.NumberOfViews,
            },
            Url = new Uri(Model.ProductModel.PostUrl.GetAbsoluteUrl()),
            Image = images,
            ApplicationCategory = "DeveloperApplication",
            AggregateRating = new AggregateRating()
            {
                RatingValue = double.Parse("0" + CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator + Model.ProductModel.Id) * (5 - 4) + 4,
                BestRating = 5,
                RatingCount = Model.ProductModel.NumberOfDownloads + 1,
            },
            Offers = new OneOrMany<IOffer>(new Offer()
            {
                Price = Model.ProductModel.Price.ToString("F2", CultureInfo.InvariantCulture),
                PriceCurrency = defaultCurrency.IsoCode
            }),
            OperatingSystem = "WINDOWS, MacOS, Linux"
        };


        return result.ToHtmlEscapedString();
    }
}