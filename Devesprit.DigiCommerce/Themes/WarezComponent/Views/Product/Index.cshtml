@using System.Globalization
@using Devesprit.Core
@using Devesprit.Core.Settings
@using Devesprit.Data.Domain
@using Devesprit.Data.Enums
@using Devesprit.Services
@using Devesprit.Services.Currency
@using Devesprit.Services.Localization
@using Devesprit.Services.Posts
@using Devesprit.Services.SearchEngine
@using Devesprit.Utilities
@using Devesprit.Utilities.Extensions
@using Devesprit.WebFramework.Helpers
@using Newtonsoft.Json
@using Schema.NET
@model Devesprit.DigiCommerce.Models.Products.ProductModel
@{
    ViewBag.Title = Model.PageTitle;
    ViewBag.MetaKeyword = Model.MetaKeyWords;
    ViewBag.MetaDescription = Model.MetaDescription;
    var settings = DependencyResolver.Current.GetService<ISettingService>().LoadSetting<SiteSettings>();

    Html.AddHeadCustomParts("<meta name=\"robots\" content=\"index,follow\">");
    Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Model.Title + "\">");
    Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + Model.PostUrl + "\">");
    Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Model.MetaDescription + "\">");
    Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + settings.GetLocalized(x => x.SiteName) + "\">");
    Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Model.MetaDescription + "\">");
    if (Model.Images != null && Model.Images.Count > 0)
    {
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.Images[0].ImageUrl + "\">");
    }

    //Add Canonical Url
    var workContext = DependencyResolver.Current.GetService<IWorkContext>();
    var pageMainUrl = Url.Action("Index", "Product", new { id = Model.Id, slug = Model.Slug, lang = workContext.CurrentLanguage.IsoCode }, Request.Url.Scheme);
    Html.AppendCanonicalUrlParts(pageMainUrl);

    var postFirstCategory = Model.Categories.FirstOrDefault();
    var counter = 0;
}

<article>
    <!-- pro head slider -->
    <header class="pro-head-slider">
        <div class="pro-head-slider-layer">
            <div class="container">
                <div class="row">
                    <div class="col-12 d-flex justify-content-center">
                        <h1 class="pro-head-title pro-head-title-single @Html.Raw(Model.TitleIsRtl ? "rtl-dir" : "ltr-dir")">
                            @Html.Raw(Model.Title.Trim())
                        </h1>
                    </div>
                    <div class="col-12">
                        <ul class="breadcrumbs">
                            <li><a href="@Url.Action("Index", "Home")">@T("Home")</a></li>
                            @if (postFirstCategory != null)
                            {
                                <li>/</li>
                                <li><a href="@postFirstCategory.CategoryUrl">@postFirstCategory.CategoryName</a></li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </header>

    @Html.Widget("product_page_start")

    <!-- product single body -->
    <div class="container">
        <div class="row">
            <!-- single product content -->
            <div class="col-sm-12 col-lg-8">
                <div class="single-product-content">
                    <div class="pro-cover">
                        @{Html.RenderPartial("Partials/_ProductImagesSection", Model.Images);}
                        <div class="action-pro">
                            @if (settings.Wishlist || settings.LikePosts)
                            {
                                <span class="fs-25 rate">
                                    @{Html.RenderAction("LikeWishlistButtonsPartialView", "Post", Model.LikeWishlistButtonsModel);}
                                </span>
                            }
                        </div>
                    </div>
                    <section id="tabs" class="project-tab">
                        <div class="row">
                            <div class="col-md-12">
                                <nav>
                                    <div class="nav nav-tabs nav-fill tab-menu" id="nav-tab" role="tablist">
                                        @foreach (var desc in Model.Descriptions)
                                        {
                                            <a class="nav-item nav-link @Html.Raw(counter == 0 ? "active" : "")"
                                               id="nav-@counter-tab" data-toggle="tab" href="#nav-@counter" role="tab" aria-controls="nav-@counter"
                                               @Html.Raw(counter == 0 ? "aria-selected=\"true\"" : "")>
                                                @Html.Raw(desc.Title)
                                            </a>
                                            counter++;
                                        }
                                        @if (settings.AllowUsersToWriteComment && Model.AllowCustomerReviews)
                                        {
                                            <a class="nav-item nav-link" id="nav-comment-tab" data-toggle="tab" href="#nav-comment" role="tab" aria-controls="nav-comment" aria-selected="false">@T("Comments")</a>
                                        }
                                    </div>
                                </nav>
                                <div class="tab-content" id="nav-tabContent">
                                    @{counter = 0;}
                                    @foreach (var desc in Model.Descriptions)
                                    {
                                        <div class="tab-pane fade @Html.Raw(desc.IsRtl ? "rtl-dir text-right" : "ltr-dir text-left") @Html.Raw(counter == 0 ? "show active" : "")" id="nav-@counter" role="tabpanel" aria-labelledby="nav-@counter-tab">
                                            <div class="tab-body-box">
                                                @Html.Raw(desc.Description)
                                                <footer class="pro-single-desc-footer">
                                                    @if (Model.DownloadModel.ShowDownloadFullVersionBtn)
                                                    {
                                                        <a href="@Url.Action("DownloadProduct", "Download", new {productId = Model.Id, demoFiles = false})"
                                                           target="_blank"
                                                           class="pro-single-dl-btn">
                                                            @Html.Raw(T("DownloadNow"))
                                                        </a>
                                                    }
                                                <div class="share-box-pro">
                                                    <span class="share-title">Share :</span>
                                                    <ul class="single-pro-share-social">
                                                        <li><a href="javascript:void(0);" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=@pageMainUrl', '_blank', 'width=600,height=600');"><i class="fab fa-facebook-f"></i></a></li>
                                                        <li><a href="javascript:void(0);" onclick="window.open('https://twitter.com/share?url=@pageMainUrl', '_blank', 'width=600,height=600');"><i class="fab fa-twitter"></i></a></li>
                                                        <li><a href="javascript:void(0);" onclick="window.open('https://www.linkedin.com/shareArticle?mini=true&url=@pageMainUrl', '_blank', 'width=600,height=600');"><i class="fab fa-linkedin"></i></a></li>
                                                        <li><a href="#" title=""><i class="fab fa-whatsapp"></i></a></li>
                                                        <li><a href="#" title=""><i class="fab fa-telegram"></i></a></li>
                                                        <li><a href="#" title=""><i class="fab fa-facebook-messenger"></i></a></li>
                                                    </ul>
                                                </div>
                                                </footer>
                                            </div>
                                        </div>
                                        counter++;
                                    }
                                    @if (settings.AllowUsersToWriteComment && Model.AllowCustomerReviews)
                                    {
                                        <div class="tab-pane fade" id="nav-comment" role="tabpanel" aria-labelledby="nav-comment-tab">
                                            <div class="tab-body-box">
                                                <div id="commentsListPlaceholder">
                                                    @{ Html.RenderAction("CommentsList", "Comment", new { postId = Model.Id }); }
                                                </div>
                                                <h4 class="add-cmnt">@T("WriteYourComment")</h4>
                                                <div id="CommentEditor">
                                                    @{
                                                        Html.RenderAction("CommentEditor", "Comment", new { postId = Model.Id });
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            </div>

            <!-- single product sidebar -->
            <div class="col-sm-12 col-lg-4">
                @{Html.RenderPartial("Partials/_ProductDownloadView", Model.DownloadModel);}

                @if (User.IsInRole("Admin") && Model.Published == false)
                {
                    <div class="alert alert-danger fs-12 text-center mar-v-20" role="alert">
                        @T("UnPublished")
                    </div>
                }
                @{Html.RenderPartial("Partials/_ProductAttributesSection", Model);}
                @{Html.RenderPartial("Partials/_ProductTagsSection", Model.TagsList);}
                @if (Model.ShowKeywords)
                {
                    Html.RenderPartial("Partials/_ProductKeywordsSection", Model.MetaKeyWords);
                }
            </div>
        </div>
    </div>
</article>

@if (Model.ShowSimilarCases)
{
    Html.RenderAction("MoreLikeThis", "Search", new { postId = Model.Id, postType = PostType.Product, numberOfSimilarityPosts = 8 });
}


<script type="application/ld+json">
    @Html.Raw(GenerateSchema())
</script>

@Html.Widget("product_page_end")


@functions
{
    private string GenerateSchema()
    {
        var setting = DependencyResolver.Current.GetService<ISettingService>().LoadSetting<SiteSettings>();
        var defaultCurrency = DependencyResolver.Current.GetService<ICurrencyService>().GetDefaultCurrency();
        var images = new List<Uri>();
        foreach (var image in Model.Images)
        {
            images.Add(new Uri(image.ImageUrl.GetAbsoluteUrl()));
        }

        var result = new Schema.NET.WebPage()
        {
            Name = Model.Title.ConvertHtmlToText(),
            Headline = Model.Title.ConvertHtmlToText(),
            Description = Model.Descriptions != null && Model.Descriptions.Count > 0
                ? JsonConvert.ToString(Model.Descriptions[0].Description.ConvertHtmlToText())
                : Model.MetaDescription,
            Keywords = Model.MetaKeyWords,
            DatePublished = Model.PublishDate,
            DateCreated = Model.PublishDate,
            DateModified = Model.LastUpdate,
            InteractionStatistic = new InteractionCounter()
            {
                UserInteractionCount = Model.NumberOfViews,
            },
            Url = new Uri(Model.PostUrl.GetAbsoluteUrl()),
            DiscussionUrl = new Uri(Model.PostUrl.GetAbsoluteUrl()),
            PrimaryImageOfPage = new ImageObject()
            {
                Url = Model.Images != null && Model.Images.Count > 0 ? new Uri(Model.Images[0].ImageUrl.GetAbsoluteUrl()) : null
            },
            Image = images,
            ContentRating = new Values<IRating, string>(),
            Publisher = new Organization()
            {
                Name = setting.GetLocalized(x => x.SiteName),
                Email = setting.SiteEmailAddress,
                Url = new Uri(setting.SiteUrl),
                Logo = new Uri(setting.GetLocalized(x => x.SiteLogoHeader).GetAbsoluteUrl())
            },
            Provider = new Organization()
            {
                Name = setting.GetLocalized(x => x.SiteName),
                Email = setting.SiteEmailAddress,
                Url = new Uri(setting.SiteUrl),
                Logo = new Uri(setting.GetLocalized(x => x.SiteLogoHeader).GetAbsoluteUrl())
            },
            Offers = new OneOrMany<IOffer>(new Offer()
            {
                Price = Model.Price.ToString("F2", CultureInfo.InvariantCulture),
                PriceCurrency = defaultCurrency.IsoCode
            }),
        };

        var relatedProducts = DependencyResolver.Current.GetService<ISearchEngine>()
            .MoreLikeThis(Model.Id, null, 0, PostType.Product, SearchPlace.Title | SearchPlace.Description | SearchPlace.Tags, 20);
        var relatedLinks = new List<Uri>();
        if (!relatedProducts.HasError && relatedProducts.Documents.Count > 0)
        {
            var posts = DependencyResolver.Current.GetService<IPostService<TblPosts>>().GetItemsById(
                relatedProducts.Documents.Select(p => p.DocumentId).Take(5)
                    .ToList(), 1,
                5);

            foreach (var post in posts)
            {
                relatedLinks.Add(
                    new Uri(("/Product/" + post.Slug).GetAbsoluteUrl()));
            }
        }

        if (relatedLinks.Count > 0)
        {
            result.RelatedLink = new OneOrMany<Uri>(relatedLinks);
        }


        return result.ToHtmlEscapedString();
    }
}
