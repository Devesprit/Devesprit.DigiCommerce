//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Devesprit.Services.FileManagerServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileSystemEntries", Namespace="http://schemas.datacontract.org/2004/07/Devesprit.FileServer")]
    [System.SerializableAttribute()]
    public partial class FileSystemEntries : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplaySizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DownloadLinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SizeInByteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Devesprit.Services.FileManagerServiceReference.FileSystemEntries[] SubEntriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Devesprit.Services.FileManagerServiceReference.FileSystemEntryType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDateUtc {
            get {
                return this.CreateDateUtcField;
            }
            set {
                if ((this.CreateDateUtcField.Equals(value) != true)) {
                    this.CreateDateUtcField = value;
                    this.RaisePropertyChanged("CreateDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplaySize {
            get {
                return this.DisplaySizeField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplaySizeField, value) != true)) {
                    this.DisplaySizeField = value;
                    this.RaisePropertyChanged("DisplaySize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DownloadLink {
            get {
                return this.DownloadLinkField;
            }
            set {
                if ((object.ReferenceEquals(this.DownloadLinkField, value) != true)) {
                    this.DownloadLinkField = value;
                    this.RaisePropertyChanged("DownloadLink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDateUtc {
            get {
                return this.ModifiedDateUtcField;
            }
            set {
                if ((this.ModifiedDateUtcField.Equals(value) != true)) {
                    this.ModifiedDateUtcField = value;
                    this.RaisePropertyChanged("ModifiedDateUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SizeInByte {
            get {
                return this.SizeInByteField;
            }
            set {
                if ((this.SizeInByteField.Equals(value) != true)) {
                    this.SizeInByteField = value;
                    this.RaisePropertyChanged("SizeInByte");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Devesprit.Services.FileManagerServiceReference.FileSystemEntries[] SubEntries {
            get {
                return this.SubEntriesField;
            }
            set {
                if ((object.ReferenceEquals(this.SubEntriesField, value) != true)) {
                    this.SubEntriesField = value;
                    this.RaisePropertyChanged("SubEntries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Devesprit.Services.FileManagerServiceReference.FileSystemEntryType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileSystemEntryType", Namespace="http://schemas.datacontract.org/2004/07/Devesprit.FileServer")]
    public enum FileSystemEntryType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        File = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Dir = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileManagerServiceReference.IFileManagerService")]
    public interface IFileManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/EnumerateDirectoryEntries", ReplyAction="http://tempuri.org/IFileManagerService/EnumerateDirectoryEntriesResponse")]
        Devesprit.Services.FileManagerServiceReference.FileSystemEntries[] EnumerateDirectoryEntries(string path, string searchPattern, bool includeSubEntries, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/EnumerateDirectoryEntries", ReplyAction="http://tempuri.org/IFileManagerService/EnumerateDirectoryEntriesResponse")]
        System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries[]> EnumerateDirectoryEntriesAsync(string path, string searchPattern, bool includeSubEntries, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/EnumerateDirectories", ReplyAction="http://tempuri.org/IFileManagerService/EnumerateDirectoriesResponse")]
        Devesprit.Services.FileManagerServiceReference.FileSystemEntries[] EnumerateDirectories(string path, string searchPattern, bool includeSubEntries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/EnumerateDirectories", ReplyAction="http://tempuri.org/IFileManagerService/EnumerateDirectoriesResponse")]
        System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries[]> EnumerateDirectoriesAsync(string path, string searchPattern, bool includeSubEntries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/EnumerateFiles", ReplyAction="http://tempuri.org/IFileManagerService/EnumerateFilesResponse")]
        Devesprit.Services.FileManagerServiceReference.FileSystemEntries[] EnumerateFiles(string path, string searchPattern, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/EnumerateFiles", ReplyAction="http://tempuri.org/IFileManagerService/EnumerateFilesResponse")]
        System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries[]> EnumerateFilesAsync(string path, string searchPattern, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetFileInfo", ReplyAction="http://tempuri.org/IFileManagerService/GetFileInfoResponse")]
        Devesprit.Services.FileManagerServiceReference.FileSystemEntries GetFileInfo(string path, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetFileInfo", ReplyAction="http://tempuri.org/IFileManagerService/GetFileInfoResponse")]
        System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries> GetFileInfoAsync(string path, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetDirectoryInfo", ReplyAction="http://tempuri.org/IFileManagerService/GetDirectoryInfoResponse")]
        Devesprit.Services.FileManagerServiceReference.FileSystemEntries GetDirectoryInfo(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GetDirectoryInfo", ReplyAction="http://tempuri.org/IFileManagerService/GetDirectoryInfoResponse")]
        System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries> GetDirectoryInfoAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/DeleteFile", ReplyAction="http://tempuri.org/IFileManagerService/DeleteFileResponse")]
        bool DeleteFile(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/DeleteFile", ReplyAction="http://tempuri.org/IFileManagerService/DeleteFileResponse")]
        System.Threading.Tasks.Task<bool> DeleteFileAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/SearchAndDeleteFile", ReplyAction="http://tempuri.org/IFileManagerService/SearchAndDeleteFileResponse")]
        bool SearchAndDeleteFile(string path, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/SearchAndDeleteFile", ReplyAction="http://tempuri.org/IFileManagerService/SearchAndDeleteFileResponse")]
        System.Threading.Tasks.Task<bool> SearchAndDeleteFileAsync(string path, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/DeleteDirectory", ReplyAction="http://tempuri.org/IFileManagerService/DeleteDirectoryResponse")]
        bool DeleteDirectory(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/DeleteDirectory", ReplyAction="http://tempuri.org/IFileManagerService/DeleteDirectoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteDirectoryAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CreateDirectory", ReplyAction="http://tempuri.org/IFileManagerService/CreateDirectoryResponse")]
        bool CreateDirectory(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CreateDirectory", ReplyAction="http://tempuri.org/IFileManagerService/CreateDirectoryResponse")]
        System.Threading.Tasks.Task<bool> CreateDirectoryAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CopyFile", ReplyAction="http://tempuri.org/IFileManagerService/CopyFileResponse")]
        bool CopyFile(string src, string dest, bool overWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CopyFile", ReplyAction="http://tempuri.org/IFileManagerService/CopyFileResponse")]
        System.Threading.Tasks.Task<bool> CopyFileAsync(string src, string dest, bool overWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/MoveFile", ReplyAction="http://tempuri.org/IFileManagerService/MoveFileResponse")]
        bool MoveFile(string src, string dest, bool overWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/MoveFile", ReplyAction="http://tempuri.org/IFileManagerService/MoveFileResponse")]
        System.Threading.Tasks.Task<bool> MoveFileAsync(string src, string dest, bool overWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CopyDirectory", ReplyAction="http://tempuri.org/IFileManagerService/CopyDirectoryResponse")]
        bool CopyDirectory(string src, string dest, bool overWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CopyDirectory", ReplyAction="http://tempuri.org/IFileManagerService/CopyDirectoryResponse")]
        System.Threading.Tasks.Task<bool> CopyDirectoryAsync(string src, string dest, bool overWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/MoveDirectory", ReplyAction="http://tempuri.org/IFileManagerService/MoveDirectoryResponse")]
        bool MoveDirectory(string src, string dest, bool overWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/MoveDirectory", ReplyAction="http://tempuri.org/IFileManagerService/MoveDirectoryResponse")]
        System.Threading.Tasks.Task<bool> MoveDirectoryAsync(string src, string dest, bool overWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GenerateDownloadLink", ReplyAction="http://tempuri.org/IFileManagerService/GenerateDownloadLinkResponse")]
        string GenerateDownloadLink(string path, System.TimeSpan expireAfter, int downloadCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/GenerateDownloadLink", ReplyAction="http://tempuri.org/IFileManagerService/GenerateDownloadLinkResponse")]
        System.Threading.Tasks.Task<string> GenerateDownloadLinkAsync(string path, System.TimeSpan expireAfter, int downloadCountLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CompressFile", ReplyAction="http://tempuri.org/IFileManagerService/CompressFileResponse")]
        bool CompressFile(string path, string saveTo, bool overwrite, string password, int compressionLevel, bool useBZip2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CompressFile", ReplyAction="http://tempuri.org/IFileManagerService/CompressFileResponse")]
        System.Threading.Tasks.Task<bool> CompressFileAsync(string path, string saveTo, bool overwrite, string password, int compressionLevel, bool useBZip2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CompressDirectory", ReplyAction="http://tempuri.org/IFileManagerService/CompressDirectoryResponse")]
        bool CompressDirectory(string path, string saveTo, bool overwrite, string password, int compressionLevel, bool useBZip2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CompressDirectory", ReplyAction="http://tempuri.org/IFileManagerService/CompressDirectoryResponse")]
        System.Threading.Tasks.Task<bool> CompressDirectoryAsync(string path, string saveTo, bool overwrite, string password, int compressionLevel, bool useBZip2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CalculateMd5Checksum", ReplyAction="http://tempuri.org/IFileManagerService/CalculateMd5ChecksumResponse")]
        string CalculateMd5Checksum(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/CalculateMd5Checksum", ReplyAction="http://tempuri.org/IFileManagerService/CalculateMd5ChecksumResponse")]
        System.Threading.Tasks.Task<string> CalculateMd5ChecksumAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/UploadFileRequest", ReplyAction="http://tempuri.org/IFileManagerService/UploadFileRequestResponse")]
        string UploadFileRequest(string fileName, string saveTo, bool overWrite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileManagerService/UploadFileRequest", ReplyAction="http://tempuri.org/IFileManagerService/UploadFileRequestResponse")]
        System.Threading.Tasks.Task<string> UploadFileRequestAsync(string fileName, string saveTo, bool overWrite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileManagerServiceChannel : Devesprit.Services.FileManagerServiceReference.IFileManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileManagerServiceClient : System.ServiceModel.ClientBase<Devesprit.Services.FileManagerServiceReference.IFileManagerService>, Devesprit.Services.FileManagerServiceReference.IFileManagerService {
        
        public FileManagerServiceClient() {
        }
        
        public FileManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Devesprit.Services.FileManagerServiceReference.FileSystemEntries[] EnumerateDirectoryEntries(string path, string searchPattern, bool includeSubEntries, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit) {
            return base.Channel.EnumerateDirectoryEntries(path, searchPattern, includeSubEntries, includeDownloadLink, downloadLinksExpire, downloadCountLimit);
        }
        
        public System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries[]> EnumerateDirectoryEntriesAsync(string path, string searchPattern, bool includeSubEntries, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit) {
            return base.Channel.EnumerateDirectoryEntriesAsync(path, searchPattern, includeSubEntries, includeDownloadLink, downloadLinksExpire, downloadCountLimit);
        }
        
        public Devesprit.Services.FileManagerServiceReference.FileSystemEntries[] EnumerateDirectories(string path, string searchPattern, bool includeSubEntries) {
            return base.Channel.EnumerateDirectories(path, searchPattern, includeSubEntries);
        }
        
        public System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries[]> EnumerateDirectoriesAsync(string path, string searchPattern, bool includeSubEntries) {
            return base.Channel.EnumerateDirectoriesAsync(path, searchPattern, includeSubEntries);
        }
        
        public Devesprit.Services.FileManagerServiceReference.FileSystemEntries[] EnumerateFiles(string path, string searchPattern, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit) {
            return base.Channel.EnumerateFiles(path, searchPattern, includeDownloadLink, downloadLinksExpire, downloadCountLimit);
        }
        
        public System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries[]> EnumerateFilesAsync(string path, string searchPattern, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit) {
            return base.Channel.EnumerateFilesAsync(path, searchPattern, includeDownloadLink, downloadLinksExpire, downloadCountLimit);
        }
        
        public Devesprit.Services.FileManagerServiceReference.FileSystemEntries GetFileInfo(string path, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit) {
            return base.Channel.GetFileInfo(path, includeDownloadLink, downloadLinksExpire, downloadCountLimit);
        }
        
        public System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries> GetFileInfoAsync(string path, bool includeDownloadLink, System.TimeSpan downloadLinksExpire, int downloadCountLimit) {
            return base.Channel.GetFileInfoAsync(path, includeDownloadLink, downloadLinksExpire, downloadCountLimit);
        }
        
        public Devesprit.Services.FileManagerServiceReference.FileSystemEntries GetDirectoryInfo(string path) {
            return base.Channel.GetDirectoryInfo(path);
        }
        
        public System.Threading.Tasks.Task<Devesprit.Services.FileManagerServiceReference.FileSystemEntries> GetDirectoryInfoAsync(string path) {
            return base.Channel.GetDirectoryInfoAsync(path);
        }
        
        public bool DeleteFile(string path) {
            return base.Channel.DeleteFile(path);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFileAsync(string path) {
            return base.Channel.DeleteFileAsync(path);
        }
        
        public bool SearchAndDeleteFile(string path, string fileName) {
            return base.Channel.SearchAndDeleteFile(path, fileName);
        }
        
        public System.Threading.Tasks.Task<bool> SearchAndDeleteFileAsync(string path, string fileName) {
            return base.Channel.SearchAndDeleteFileAsync(path, fileName);
        }
        
        public bool DeleteDirectory(string path) {
            return base.Channel.DeleteDirectory(path);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteDirectoryAsync(string path) {
            return base.Channel.DeleteDirectoryAsync(path);
        }
        
        public bool CreateDirectory(string path) {
            return base.Channel.CreateDirectory(path);
        }
        
        public System.Threading.Tasks.Task<bool> CreateDirectoryAsync(string path) {
            return base.Channel.CreateDirectoryAsync(path);
        }
        
        public bool CopyFile(string src, string dest, bool overWrite) {
            return base.Channel.CopyFile(src, dest, overWrite);
        }
        
        public System.Threading.Tasks.Task<bool> CopyFileAsync(string src, string dest, bool overWrite) {
            return base.Channel.CopyFileAsync(src, dest, overWrite);
        }
        
        public bool MoveFile(string src, string dest, bool overWrite) {
            return base.Channel.MoveFile(src, dest, overWrite);
        }
        
        public System.Threading.Tasks.Task<bool> MoveFileAsync(string src, string dest, bool overWrite) {
            return base.Channel.MoveFileAsync(src, dest, overWrite);
        }
        
        public bool CopyDirectory(string src, string dest, bool overWrite) {
            return base.Channel.CopyDirectory(src, dest, overWrite);
        }
        
        public System.Threading.Tasks.Task<bool> CopyDirectoryAsync(string src, string dest, bool overWrite) {
            return base.Channel.CopyDirectoryAsync(src, dest, overWrite);
        }
        
        public bool MoveDirectory(string src, string dest, bool overWrite) {
            return base.Channel.MoveDirectory(src, dest, overWrite);
        }
        
        public System.Threading.Tasks.Task<bool> MoveDirectoryAsync(string src, string dest, bool overWrite) {
            return base.Channel.MoveDirectoryAsync(src, dest, overWrite);
        }
        
        public string GenerateDownloadLink(string path, System.TimeSpan expireAfter, int downloadCountLimit) {
            return base.Channel.GenerateDownloadLink(path, expireAfter, downloadCountLimit);
        }
        
        public System.Threading.Tasks.Task<string> GenerateDownloadLinkAsync(string path, System.TimeSpan expireAfter, int downloadCountLimit) {
            return base.Channel.GenerateDownloadLinkAsync(path, expireAfter, downloadCountLimit);
        }
        
        public bool CompressFile(string path, string saveTo, bool overwrite, string password, int compressionLevel, bool useBZip2) {
            return base.Channel.CompressFile(path, saveTo, overwrite, password, compressionLevel, useBZip2);
        }
        
        public System.Threading.Tasks.Task<bool> CompressFileAsync(string path, string saveTo, bool overwrite, string password, int compressionLevel, bool useBZip2) {
            return base.Channel.CompressFileAsync(path, saveTo, overwrite, password, compressionLevel, useBZip2);
        }
        
        public bool CompressDirectory(string path, string saveTo, bool overwrite, string password, int compressionLevel, bool useBZip2) {
            return base.Channel.CompressDirectory(path, saveTo, overwrite, password, compressionLevel, useBZip2);
        }
        
        public System.Threading.Tasks.Task<bool> CompressDirectoryAsync(string path, string saveTo, bool overwrite, string password, int compressionLevel, bool useBZip2) {
            return base.Channel.CompressDirectoryAsync(path, saveTo, overwrite, password, compressionLevel, useBZip2);
        }
        
        public string CalculateMd5Checksum(string path) {
            return base.Channel.CalculateMd5Checksum(path);
        }
        
        public System.Threading.Tasks.Task<string> CalculateMd5ChecksumAsync(string path) {
            return base.Channel.CalculateMd5ChecksumAsync(path);
        }
        
        public string UploadFileRequest(string fileName, string saveTo, bool overWrite) {
            return base.Channel.UploadFileRequest(fileName, saveTo, overWrite);
        }
        
        public System.Threading.Tasks.Task<string> UploadFileRequestAsync(string fileName, string saveTo, bool overWrite) {
            return base.Channel.UploadFileRequestAsync(fileName, saveTo, overWrite);
        }
    }
}
